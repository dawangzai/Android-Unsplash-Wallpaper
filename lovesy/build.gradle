apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.wangzai.lovesy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "BASE_URL", "\"${BASE_URL}\"")
        buildConfigField("String", "CLIENT_ID", "\"${CLIENT_ID}\"")
        buildConfigField("String", "CLIENT_SECRET", "\"${CLIENT_SECRET}\"")
        buildConfigField("String", "REDIRECT_URL", "\"${REDIRECT_URL}\"")
        buildConfigField("String", "APP_ID", "\"${APP_ID}\"")
        buildConfigField("String", "BUNDLE_ID", "\"${BUNDLE_ID}\"")
        buildConfigField("String", "API_TOKEN", "\"${API_TOKEN}\"")
    }

    signingConfigs {
        debug {
            storeFile file(System.getProperty("user.home") + "/.android/debug.keystore")
        }

        release {
            storeFile file(System.getProperty("user.home") + "/.android/release.jks")
            storePassword "${STORE_PASSWORD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PASSWORD}"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "LOG_DEBUG", "true"
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "LOG_DEBUG", "false"
            zipAlignEnabled true
            shrinkResources false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        fir{}
        googleplay {}
        yingyongbao {}
        baidu {}
        qihu360 {}
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
                def apkFile = new File(
                        output.outputFile.getParent(),
                        "lovesy_${flavorName}_v${variant.versionName}_${buildTime()}.apk")
                output.outputFile = apkFile
            }
        }
    }

//    productFlavors.all { flavor ->
//        manifestPlaceholders.put("UMENG_CHANNEL_VALUE", name)
//    }

    lintOptions {
        disable 'TypographyFractions','TypographyQuotes'
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        check 'NewApi', 'InlinedApi'
        quiet true
        abortOnError false
        ignoreWarnings true
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    //ButterKnife
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    compile project(':lovesy-core')
}

static def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}